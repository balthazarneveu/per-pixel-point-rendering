from typing import List
from pathlib import Path
from interactive_pipe.data_objects.parameters import Parameters
from pixr.properties import CAMERA_PARAMS_FILE, RGB_VIEW_FILE
from pixr.camera.camera_geometry import set_camera_parameters, get_camera_extrinsics, get_camera_intrinsics


def load_views(config_views_folder_path: List[Path]) -> List[dict]:
    """Make the bridge between the BlenderProc pipeline and the pixr pipeline.

    Args:
        config_views_folder_path (List[Path]): List of paths to the views folders.
        Generated by the BlenderProc pipeline studies/full_render.py
        Example:
        ["__output/scene/view_000/", "__output/scene/view_001/"]

    Returns:
        List[dict]: List containing the camera parameters and the path to the rendered view.
    """
    views = []
    for idx, current_view_path in enumerate(config_views_folder_path):
        params = Parameters.load_json(current_view_path/CAMERA_PARAMS_FILE)
        yaw_angle = params["yaw"]
        pitch_angle = params["pitch"]
        roll_angle = params["roll"]
        position_blender = params["position"]
        position = [-position_blender[0], -position_blender[2], -position_blender[1]]
        yaw, pitch, roll, cam_pos = set_camera_parameters(
            yaw_deg=yaw_angle,
            pitch_deg=pitch_angle,
            roll_deg=roll_angle,
            trans_x=position[0],
            trans_y=position[1],
            trans_z=position[2]
        )
        camera_extrinsics = get_camera_extrinsics(yaw, pitch, roll, cam_pos)
        camera_intrinsics, w, h = get_camera_intrinsics()
        rendered_view_path = current_view_path/RGB_VIEW_FILE
        assert rendered_view_path.exists(), f"Rendered view {rendered_view_path} does not exist"
        view_dict = {
            "trans_x": position[0],
            "trans_y": position[1],
            "trans_z": position[2],
            "yaw_deg": yaw_angle,
            "pitch_deg": pitch_angle,
            "roll_deg": roll_angle,
            "cam_pos": cam_pos,
            "camera_extrinsics": camera_extrinsics,
            "camera_intrinsics": camera_intrinsics,
            "w": w,
            "h": h,
            "path_to_image": rendered_view_path,

        }
        views.append(view_dict)
    return views
